{"version":3,"sources":["node_modules/browser-pack/_prelude.js","test-js/animation/calcanimation.js","app.js","test-js/app.js","test-js/calccomputation/buttonpress.js","test-js/calccomputation/calcdisplay.js","test-js/calccomputation/evaluate.js","test-js/calccomputation/isoperator.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","event","mfcButton","target","calcClasses","document","querySelector","classList","contains","remove","add","innerHTML",2,"buttonpress","rotatecalc","buttonContainer","animateButton","addEventListener","./animation/calcanimation","./calccomputation/buttonpress",3,"calc","eventTag","tagName","targetOutput","clear","display","./calcdisplay","./evaluate",4,"isOperator","evaluate","calcScreen","outputArray","output","calcScreenDisplay","lastOutArrayElement","isNaN","parseFloat","push","total","indexOf","conDec","undefined","./isoperator",5,"argArray","opArray","filter","numbArray","val","reduce","b","operator","shift",6,"text","targetArray"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//function adds and removes class to rotate the calculator\nmodule.exports =function(event){\n\t//references the element clicked, calcualtor-container ,and calculator-container classList\n\tvar mfcButton = event.target;\n\tvar calcContainer = document.querySelector(\".calculator-container\");\n\tvar calcClasses = document.querySelector(\".calculator-container\").classList;\n\t//determines whether the calculator has been rotated to the left\n\tif(calcClasses.contains(\"rotate-left\") === true){\n\t\tcalcClasses.remove(\"rotate-left\");\n\t\tcalcClasses.add(\"rotate-right\");\n\t\t//changes the inner html of the button clicked\n\t\tmfcButton.innerHTML = \"View Manufacturer Info\";\n\t\treturn;\n\t}\n\t//determines whether the calculator has been rotated to the right\n\tif(calcClasses.contains(\"rotate-left\")  === false){\n\t\t//determines whether the rotate-right class exists\n\t\tif(calcClasses.contains(\"rotate-right\")){\n\t\t\tcalcClasses.remove(\"rotate-right\");\n\t\t}\n\t\tcalcClasses.add(\"rotate-left\");\n\t\t//changes the inner html of the button clicked\n\t\tmfcButton.innerHTML = \"Go Back\";\n\t};\n}\n\n\t","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n//function adds and removes class to rotate the calculator\nmodule.exports =function(event){\n\t//references the element clicked, calcualtor-container ,and calculator-container classList\n\tvar mfcButton = event.target;\n\tvar calcContainer = document.querySelector(\".calculator-container\");\n\tvar calcClasses = document.querySelector(\".calculator-container\").classList;\n\t//determines whether the calculator has been rotated to the left\n\tif(calcClasses.contains(\"rotate-left\") === true){\n\t\tcalcClasses.remove(\"rotate-left\");\n\t\tcalcClasses.add(\"rotate-right\");\n\t\t//changes the inner html of the button clicked\n\t\tmfcButton.innerHTML = \"View Manufacturer Info\";\n\t\treturn;\n\t}\n\t//determines whether the calculator has been rotated to the right\n\tif(calcClasses.contains(\"rotate-left\")  === false){\n\t\t//determines whether the rotate-right class exists\n\t\tif(calcClasses.contains(\"rotate-right\")){\n\t\t\tcalcClasses.remove(\"rotate-right\");\n\t\t}\n\t\tcalcClasses.add(\"rotate-left\");\n\t\t//changes the inner html of the button clicked\n\t\tmfcButton.innerHTML = \"Go Back\";\n\t};\n}\n\n\t\n},{}],2:[function(require,module,exports){\nvar buttonpress = require('./calccomputation/buttonpress');\nvar rotatecalc = require('./animation/calcanimation');\n\n//buttonConatiner references the calculator button contianer\nvar buttonContainer = document.querySelector(\"#button-container\");\n//animateButton refernces the button which allows the user to rotate the container\nvar animateButton = document.querySelector(\"#mfc-btn\");\n\n//adds event listener to listen for users attempting to interact with calculator buttons\nbuttonContainer.addEventListener(\"click\",buttonpress,false);\n//adds event listener to listen for users attempting to rotate the calculator\nanimateButton.addEventListener(\"click\",rotatecalc,false);\n\n},{\"./animation/calcanimation\":1,\"./calccomputation/buttonpress\":3}],3:[function(require,module,exports){\nvar calc = require(\"./calcdisplay\");\nvar evaluate = require(\"./evaluate\");\n\n//function determines if a button from the calculator was pressed and the appropriate function to call\nmodule.exports = function (event){\n\t\tvar eventTag = event.target.tagName;\n\t\tvar target = event.target;\n\t\t//determines whether a button element was clicked\n\t\tif( eventTag === \"BUTTON\"){\n\t\t\tvar targetOutput =  target.innerHTML;\n\t\t\t//determines whether a clear button was clicked and then calls the clear function\n\t\t\tif(targetOutput === \"AC\" || targetOutput ===\"CE\"){\n\t\t\t\treturn calc.clear(targetOutput);\n\t\t\t}\n\t\t\t//if a button was clicked which was a number or operator then calls the display function\n\t\t\tcalc.display(targetOutput);\n\t\t}\n\t\t\n};\n},{\"./calcdisplay\":4,\"./evaluate\":5}],4:[function(require,module,exports){\n\nvar isOperator  = require('./isoperator');\nvar evaluate = require(\"./evaluate\");\n//creaes variable which references the calculator screen element\nvar calcScreen = document.querySelector(\"#calc-screen\");\n//outputArray holds the user-chosen numbers and operators as strings\nvar outputArray = [];\n\nmodule.exports.calcScreen = calcScreen;\n\n//display function identifies which button was clicked and how to change the calculator display and pass along user-chosen inputs to outputArray\nmodule.exports.display = function(output){\n\t//references the calculator screen inner-html\n\tvar calcScreenDisplay = calcScreen.innerHTML;\n\t//references the last element in the output array\n\tvar lastOutArrayElement = outputArray[outputArray.length -1];\n\n\t//determines whether the \"=\" operator was clicked and whether the calculator display contains a number\n\tif(output === \"=\" && !isNaN(parseFloat(calcScreenDisplay)) ){\n\t\t//pushed the calculator display balue to the outputArray, then calculates and displays the total\n\t\toutputArray.push(calcScreenDisplay);\n\t\tvar total = evaluate(outputArray);\n\t\tcalcScreen.innerHTML = total;\n\t\t//resets outputArray\n\t\toutputArray = [];\n\t\treturn;\n\t}\n\n\t//determines whether the user clicked operator and whether the calculator display contains a number\n\tif(isOperator(output) && !isNaN(isOperator(calcScreenDisplay)) ) {\n\t\t//determines whether the calculator screen inner html contains a number add the outputArray and display the number\n\t\tif( !isNaN(parseFloat(calcScreenDisplay)) ){\n\t\t\toutputArray.push(calcScreenDisplay);\n\t\t\tcalcScreen.innerHTML = output;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//determines whether the calculator screen is empty and  if the last element in the outputArray is a number\n\t\tif(calcScreenDisplay === \"\" && !isNaN(parseFloat(lastOutArrayElement)) ){\n\t\t\tcalcScreen.innerHTML = output;\n\t\t}\n\t}\n\n\t//determines whether the user chosen input is a \"%\" operator and whether the calcualtor and outputArray match the required criteria\n\tif(output === \"%\" && !isNaN(parseFloat(calcScreenDisplay)) && calcScreenDisplay.indexOf(\"%\") === -1 && isOperator(lastOutArrayElement) ){\n\t\tcalcScreen.innerHTML += output;\n\t\treturn;\n\t}\n\t//determines whether the user chosen input is a number or decimal point\n\tif( !isNaN(parseFloat(output)) || output === \".\"){\n\t\tvar conDec = calcScreenDisplay.indexOf(\".\");\n\t\t//determines whether the calculator screen inner html contains a decimal point\n\t\tif( output === \".\" && conDec !== -1){\n\t\t\treturn;\n\t\t}\n\n\t\t//determines whether the calculator screen inner html contains a operator\n\t\tif(isOperator(calcScreenDisplay)){\n\t\t\toutputArray.push(calcScreenDisplay);\n\t\t\tcalcScreen.innerHTML = \"\";\n\t\t}\n\n\t\t//determines whether the calculator screen and outputArray match the required criteria to add the number to the Calculator screen\n\t\tif( (calcScreen.innerHTML === \"\" || !isNaN(parseFloat(calcScreenDisplay)) || calcScreen.innerHTML === \".\" ) && (outputArray[0] === undefined || isOperator(outputArray[outputArray.length -1]) )  ) {\n\t\t\tcalcScreen.innerHTML += output; \n\n\t\t}\n\t\t\n\t}\n\n\n};\n\n//clear funciton identifies which type of button was clicked and how to interact with the out outputArray and calcScreen\nmodule.exports.clear = function(output){\n\t//determines whether the CE button was clicked and if true proceeds to clear the calculator screen inner html\n\tif(output === \"CE\" ){\n\t\tcalcScreen.innerHTML = \"\";\n\t\treturn;\n\t}\n\t//determines whether the AC button was clicked and if true proceeds to clear the calculator screen inner html and outputArray\n\tif(output === \"AC\"){\n\t\tcalcScreen.innerHTML = \"\";\n\t    outputArray = [];\n\n\t\t\n\t}\n};\n},{\"./evaluate\":5,\"./isoperator\":6}],5:[function(require,module,exports){\n\nvar isOperator = require(\"./isoperator\");\nvar calcScreen = require(\"./calcdisplay\").calcScreen;\n\n//calculates the value of the array after the user has clicked the equal operator\nmodule.exports = function(argArray){\n\t//creates array of operators\n\tvar opArray = argArray.filter(isOperator);\n\t//created array of user chosen numbers\n\tvar numbArray = argArray.filter(function(val){\n\t\tif(!isNaN(parseFloat(val)) ){\n\t\t\treturn true\n\t\t}; \n\t\treturn false; \n\t});\n\n\t//performs calcualtions using switch and casses\n\tvar total = numbArray.reduce(function(a,b){\n\t\t//access teh operator to identify which calculation needs to take place\n\t\tvar operator = opArray.shift();\n\t\t//determines if a number is a percentage and converts the number to a floating point number\n\t\tif (b.indexOf(\"%\") !== -1 ){\n\t\t\tb = a * (parseFloat(b) / 100) ;\n\t\t}\n\t\t//converts the text strings to Numbers\n\t\ta = parseFloat(a);\n\t\tb = parseFloat(b);\n\n\t\tswitch (operator){\n\t\t\tcase \"x\":\n\t\t\t\treturn a * b;\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\treturn a/b;\n\t\t\t\tbreak;\n\t\t\tcase \"+\":\n\t\t\t\treturn a + b;\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\treturn a - b;\n\n\t\t}\n\t});\n\t//returns the reduced total\n\treturn total;\n\n\n\n\n}\n},{\"./calcdisplay\":4,\"./isoperator\":6}],6:[function(require,module,exports){\n//determines whether the argument contains a operator\nmodule.exports = function(text){\n\tvar targetArray = [\"/\",\"x\",\"+\",\"-\"];\n\tif(targetArray.indexOf(text)!== -1){\n\t\treturn true;\n\t}\n\treturn false;\n};\n},{}]},{},[2])\n\n","var buttonpress = require('./calccomputation/buttonpress');\nvar rotatecalc = require('./animation/calcanimation');\n\n//buttonConatiner references the calculator button contianer\nvar buttonContainer = document.querySelector(\"#button-container\");\n//animateButton refernces the button which allows the user to rotate the container\nvar animateButton = document.querySelector(\"#mfc-btn\");\n\n//adds event listener to listen for users attempting to interact with calculator buttons\nbuttonContainer.addEventListener(\"click\",buttonpress,false);\n//adds event listener to listen for users attempting to rotate the calculator\nanimateButton.addEventListener(\"click\",rotatecalc,false);\n","var calc = require(\"./calcdisplay\");\nvar evaluate = require(\"./evaluate\");\n\n//function determines if a button from the calculator was pressed and the appropriate function to call\nmodule.exports = function (event){\n\t\tvar eventTag = event.target.tagName;\n\t\tvar target = event.target;\n\t\t//determines whether a button element was clicked\n\t\tif( eventTag === \"BUTTON\"){\n\t\t\tvar targetOutput =  target.innerHTML;\n\t\t\t//determines whether a clear button was clicked and then calls the clear function\n\t\t\tif(targetOutput === \"AC\" || targetOutput ===\"CE\"){\n\t\t\t\treturn calc.clear(targetOutput);\n\t\t\t}\n\t\t\t//if a button was clicked which was a number or operator then calls the display function\n\t\t\tcalc.display(targetOutput);\n\t\t}\n\t\t\n};","\nvar isOperator  = require('./isoperator');\nvar evaluate = require(\"./evaluate\");\n//creaes variable which references the calculator screen element\nvar calcScreen = document.querySelector(\"#calc-screen\");\n//outputArray holds the user-chosen numbers and operators as strings\nvar outputArray = [];\n\nmodule.exports.calcScreen = calcScreen;\n\n//display function identifies which button was clicked and how to change the calculator display and pass along user-chosen inputs to outputArray\nmodule.exports.display = function(output){\n\t//references the calculator screen inner-html\n\tvar calcScreenDisplay = calcScreen.innerHTML;\n\t//references the last element in the output array\n\tvar lastOutArrayElement = outputArray[outputArray.length -1];\n\n\t//determines whether the \"=\" operator was clicked and whether the calculator display contains a number\n\tif(output === \"=\" && !isNaN(parseFloat(calcScreenDisplay)) ){\n\t\t//pushed the calculator display balue to the outputArray, then calculates and displays the total\n\t\toutputArray.push(calcScreenDisplay);\n\t\tvar total = evaluate(outputArray);\n\t\tcalcScreen.innerHTML = total;\n\t\t//resets outputArray\n\t\toutputArray = [];\n\t\treturn;\n\t}\n\n\t//determines whether the user clicked operator and whether the calculator display contains a number\n\tif(isOperator(output) && !isNaN(isOperator(calcScreenDisplay)) ) {\n\t\t//determines whether the calculator screen inner html contains a number add the outputArray and display the number\n\t\tif( !isNaN(parseFloat(calcScreenDisplay)) ){\n\t\t\toutputArray.push(calcScreenDisplay);\n\t\t\tcalcScreen.innerHTML = output;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//determines whether the calculator screen is empty and  if the last element in the outputArray is a number\n\t\tif(calcScreenDisplay === \"\" && !isNaN(parseFloat(lastOutArrayElement)) ){\n\t\t\tcalcScreen.innerHTML = output;\n\t\t}\n\t}\n\n\t//determines whether the user chosen input is a \"%\" operator and whether the calcualtor and outputArray match the required criteria\n\tif(output === \"%\" && !isNaN(parseFloat(calcScreenDisplay)) && calcScreenDisplay.indexOf(\"%\") === -1 && isOperator(lastOutArrayElement) ){\n\t\tcalcScreen.innerHTML += output;\n\t\treturn;\n\t}\n\t//determines whether the user chosen input is a number or decimal point\n\tif( !isNaN(parseFloat(output)) || output === \".\"){\n\t\tvar conDec = calcScreenDisplay.indexOf(\".\");\n\t\t//determines whether the calculator screen inner html contains a decimal point\n\t\tif( output === \".\" && conDec !== -1){\n\t\t\treturn;\n\t\t}\n\n\t\t//determines whether the calculator screen inner html contains a operator\n\t\tif(isOperator(calcScreenDisplay)){\n\t\t\toutputArray.push(calcScreenDisplay);\n\t\t\tcalcScreen.innerHTML = \"\";\n\t\t}\n\n\t\t//determines whether the calculator screen and outputArray match the required criteria to add the number to the Calculator screen\n\t\tif( (calcScreen.innerHTML === \"\" || !isNaN(parseFloat(calcScreenDisplay)) || calcScreen.innerHTML === \".\" ) && (outputArray[0] === undefined || isOperator(outputArray[outputArray.length -1]) )  ) {\n\t\t\tcalcScreen.innerHTML += output; \n\n\t\t}\n\t\t\n\t}\n\n\n};\n\n//clear funciton identifies which type of button was clicked and how to interact with the out outputArray and calcScreen\nmodule.exports.clear = function(output){\n\t//determines whether the CE button was clicked and if true proceeds to clear the calculator screen inner html\n\tif(output === \"CE\" ){\n\t\tcalcScreen.innerHTML = \"\";\n\t\treturn;\n\t}\n\t//determines whether the AC button was clicked and if true proceeds to clear the calculator screen inner html and outputArray\n\tif(output === \"AC\"){\n\t\tcalcScreen.innerHTML = \"\";\n\t    outputArray = [];\n\n\t\t\n\t}\n};","\nvar isOperator = require(\"./isoperator\");\nvar calcScreen = require(\"./calcdisplay\").calcScreen;\n\n//calculates the value of the array after the user has clicked the equal operator\nmodule.exports = function(argArray){\n\t//creates array of operators\n\tvar opArray = argArray.filter(isOperator);\n\t//created array of user chosen numbers\n\tvar numbArray = argArray.filter(function(val){\n\t\tif(!isNaN(parseFloat(val)) ){\n\t\t\treturn true\n\t\t}; \n\t\treturn false; \n\t});\n\n\t//performs calcualtions using switch and casses\n\tvar total = numbArray.reduce(function(a,b){\n\t\t//access teh operator to identify which calculation needs to take place\n\t\tvar operator = opArray.shift();\n\t\t//determines if a number is a percentage and converts the number to a floating point number\n\t\tif (b.indexOf(\"%\") !== -1 ){\n\t\t\tb = a * (parseFloat(b) / 100) ;\n\t\t}\n\t\t//converts the text strings to Numbers\n\t\ta = parseFloat(a);\n\t\tb = parseFloat(b);\n\n\t\tswitch (operator){\n\t\t\tcase \"x\":\n\t\t\t\treturn a * b;\n\t\t\t\tbreak;\n\t\t\tcase \"/\":\n\t\t\t\treturn a/b;\n\t\t\t\tbreak;\n\t\t\tcase \"+\":\n\t\t\t\treturn a + b;\n\t\t\t\tbreak;\n\t\t\tcase \"-\":\n\t\t\t\treturn a - b;\n\n\t\t}\n\t});\n\t//returns the reduced total\n\treturn total;\n\n\n\n\n}","//determines whether the argument contains a operator\nmodule.exports = function(text){\n\tvar targetArray = [\"/\",\"x\",\"+\",\"-\"];\n\tif(targetArray.indexOf(text)!== -1){\n\t\treturn true;\n\t}\n\treturn false;\n};"],"sourceRoot":"/source/"}